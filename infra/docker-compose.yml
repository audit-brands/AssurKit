services:
  postgres:
    image: postgres:16-alpine
    container_name: assurkit-postgres
    environment:
      POSTGRES_DB: assurkit
      POSTGRES_USER: assurkit
      POSTGRES_PASSWORD: assurkit_secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - assurkit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assurkit"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: assurkit-api
    ports:
      - "8080:80"
    volumes:
      - ../api:/var/www/html
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: assurkit
      DB_USERNAME: assurkit
      DB_PASSWORD: assurkit_secret
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - assurkit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: assurkit-frontend
    ports:
      - "3000:80"
    environment:
      VITE_API_URL: http://localhost:8080
    depends_on:
      - api
    networks:
      - assurkit-network

  minio:
    image: minio/minio:latest
    container_name: assurkit-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: assurkit
      MINIO_ROOT_PASSWORD: assurkit_secret
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - assurkit-network

  redis:
    image: redis:7-alpine
    container_name: assurkit-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - assurkit-network

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  assurkit-network:
    driver: bridge